{
  "version": 3,
  "file": "flow-based.umd.min.js",
  "sources": [
    "ng://flow-based/projects/flow-based/src/lib/flow-based.ts",
    "ng://flow-based/projects/flow-based/src/lib/flow-based.service.ts",
    "ng://flow-based/projects/flow-based/src/lib/flow-based.component.ts",
    "ng://flow-based/projects/flow-based/src/lib/components/source/source.component.ts",
    "ng://flow-based/projects/flow-based/src/lib/components/dummy/dummy.component.ts",
    "ng://flow-based/projects/flow-based/src/lib/block/block.component.ts",
    "ng://flow-based/projects/flow-based/src/lib/drag-drop/draggable/draggable.directive.ts",
    "ng://flow-based/projects/flow-based/src/lib/drag-drop/movable/movable.directive.ts",
    "ng://flow-based/projects/flow-based/src/lib/drag-drop/movable-area/movable-area.directive.ts",
    "ng://flow-based/projects/flow-based/src/lib/flow-based.module.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken, Type } from '@angular/core';\n\nexport interface XxlFlowTypes {\n  [key: string]: Type<any>;\n}\n\nexport interface XxlFlowEntry {\n  flowType: string;\n}\n\nexport const XXL_FLOW_TYPES = new InjectionToken<XxlFlowTypes>('xxl-flow-types');\n",
    "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class FlowBasedService {\n\n  constructor() { }\n\n}\n",
    "import {\n  Component,\n  ElementRef,\n  forwardRef, HostListener,\n  Inject,\n  InjectionToken,\n  Injector,\n  Input,\n  OnChanges,\n  OnInit, ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { XXL_FLOW_TYPES, XxlFlowEntry, XxlFlowTypes } from './flow-based';\nimport { FlowBasedService } from './flow-based.service';\n\nexport const XXL_FLOW_ENTRY = new InjectionToken<any>('xxl-flow-entry');\n\n@Component({\n  selector: 'xxl-flow-based',\n  template: `<article #area *ngIf=\"state\" class=\"is-max\" xxlMovableArea>\n  <h1>Flow</h1>\n  <xxl-block xxlMovable *ngFor=\"let entry of state.entries\"\n             [style.left.px]=\"entry.x - 46\" [style.top.px]=\"entry.y - 40\" class=\"block\">\n    <ng-container *ngIf=\"flowTypes[entry.type]\"\n                  [ngComponentOutlet]=\"flowTypes[entry.type]\"\n                  [ngComponentOutletInjector]=\"createInjector(entry)\"></ng-container>\n  </xxl-block>\n</article>\n`,\n  styles: [`:host{display:block;margin:20px;border:4px solid #bada55;height:calc(100% - 48px);overflow:hidden}article{height:100%}`],\n  providers: [{provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FlowBasedComponent), multi: true}]\n})\nexport class FlowBasedComponent implements OnInit, OnChanges, ControlValueAccessor {\n  flowTypes: XxlFlowTypes;\n  injectors: Injector[];\n  onChange: (state: any) => void;\n  state: any;\n\n  @ViewChild('area') area: ElementRef;\n\n  constructor(private element: ElementRef,\n              private service: FlowBasedService,\n              private injector: Injector,\n              @Inject(XXL_FLOW_TYPES) flowTypes: XxlFlowTypes) {\n    this.flowTypes = flowTypes;\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(): void {\n\n  }\n\n  createInjector(entry: any) {\n    if (this.state) {\n      return Injector.create({\n        providers: [{provide: XXL_FLOW_ENTRY, useValue: entry}],\n        parent: this.injector\n      });\n    }\n  }\n\n  registerOnChange(onChange: (state: any) => void): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(): void {\n  }\n\n  writeValue(state: any): void {\n    this.state = state;\n  }\n}\n",
    "import { Component, Inject, OnInit } from '@angular/core';\nimport { XXL_FLOW_ENTRY } from '../../flow-based.component';\n\n@Component({\n  selector: 'xxl-source',\n  template: `<p>\n  Source: {{state.state}}\n</p>\n`,\n  styles: [``]\n})\nexport class SourceComponent implements OnInit {\n  state: any;\n\n  constructor(@Inject(XXL_FLOW_ENTRY) state: any) {\n   this.state =  state;\n  }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, Inject, OnInit } from '@angular/core';\nimport { XXL_FLOW_ENTRY } from '../../flow-based.component';\n\n@Component({\n  selector: 'xxl-dummy',\n  template: `<p>\n  Dummy: {{state.state}}\n</p>\n\n`,\n  styles: [`:host{display:flex;height:100%;background-color:#d3d3d3}`]\n})\nexport class DummyComponent implements OnInit {\n  state: any;\n\n  constructor(@Inject(XXL_FLOW_ENTRY) state: any) {\n    this.state =  state;\n  }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, ElementRef, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'xxl-block',\n  template: `<div class=\"socket top\"></div>\n<div class=\"socket right\"></div>\n<div class=\"socket bottom\"></div>\n<div class=\"socket left\"></div>\n\n<ng-content></ng-content>\n`,\n  styles: [`:host{background-color:#000;width:100px;height:100px;border:2px solid #a9a9a9;display:block;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:move;position:absolute;padding:3px;overflow:hidden}.socket{position:absolute}`]\n})\nexport class BlockComponent implements OnInit {\n\n  constructor(private element: ElementRef) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Directive, EventEmitter, HostBinding, HostListener, Output } from '@angular/core';\n\n@Directive({\n  selector: '[xxlDraggable]'\n})\nexport class DraggableDirective {\n  @Output() dragStart = new EventEmitter<PointerEvent>();\n  @Output() dragMove = new EventEmitter<PointerEvent>();\n  @Output() dragEnd = new EventEmitter<PointerEvent>();\n\n  @HostBinding('class.draggable') draggable = true;\n  private dragState;\n  private isDragging = false;\n\n  @HostListener('pointerdown', ['$event']) onPointerDown(event) {\n    event.stopPropagation();\n    this.dragState = event;\n  }\n\n  @HostListener('document:pointerup', ['$event']) onPointerUp(event) {\n    if (this.isDragging) {\n      this.dragEnd.emit(event);\n    }\n\n    this.dragState = null;\n    this.isDragging = false\n  }\n\n  @HostListener('document:pointermove', ['$event']) onPointerMove(event) {\n    if (this.dragState) {\n      if (!this.isDragging) {\n        this.dragStart.emit(this.dragState);\n        this.isDragging = true;\n      }\n\n      this.dragMove.emit(event);\n    }\n  }\n}\n",
    "import { Directive, ElementRef, HostBinding, HostListener } from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport {DraggableDirective} from '../draggable/draggable.directive';\n\nexport interface XxlPosition {\n  x: number;\n  y: number;\n}\n\n@Directive({\n  selector: '[xxlMovable]'\n})\nexport class MovableDirective extends DraggableDirective {\n  @HostBinding('style.transform') get transform(): SafeStyle {\n    return this.sanitzier.bypassSecurityTrustStyle(`translateX(${this.position.x}px) translateY(${this.position.y}px)`);\n  }\n\n  public position = { x: 0, y: 0};\n  private startPosition: XxlPosition;\n\n  constructor(public element: ElementRef, private sanitzier: DomSanitizer) {\n    super();\n  }\n\n  @HostListener('dragStart', ['$event']) onDragStart(event: PointerEvent) {\n    this.startPosition = {\n      x: event.clientX - this.position.x,\n      y: event.clientY - this.position.y\n    };\n  }\n\n  @HostListener('dragMove', ['$event']) onDragMove(event: PointerEvent) {\n    this.position = {\n      x: event.clientX - this.startPosition.x,\n      y: event.clientY - this.startPosition.y\n    };\n\n  }\n\n  @HostListener('dragEnd', ['$event']) onDragEnd(event: PointerEvent) {\n  }\n}\n",
    "import {AfterContentInit, ContentChildren, Directive, ElementRef, OnInit, QueryList} from '@angular/core';\nimport {MovableDirective} from '../movable/movable.directive';\nimport {Subscription} from 'rxjs';\n\nexport interface Boundaries {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n}\n\n@Directive({\n  selector: '[xxlMovableArea]'\n})\nexport class MovableAreaDirective implements AfterContentInit {\n  @ContentChildren(MovableDirective) movables: QueryList<MovableDirective>;\n\n\n  private boundaries: Boundaries;\n  private subscriptions: Subscription[] = [];\n\n  constructor(private element: ElementRef) {\n  }\n\n  ngAfterContentInit(): void {\n    this.movables.changes.subscribe(() => {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n      this.subscriptions = [];\n\n      this.movables.forEach(movable => {\n        this.subscriptions.push(movable.dragStart.subscribe(() => this.measureBoundaries(movable)));\n        this.subscriptions.push(movable.dragMove.subscribe(() => this.maintainBoundaries(movable)));\n      });\n    });\n\n    this.movables.notifyOnChanges();\n  }\n\n  private measureBoundaries(movable: MovableDirective): void {\n    const areaRect = this.element.nativeElement.getBoundingClientRect();\n    const movableRect = movable.element.nativeElement.getBoundingClientRect();\n\n    this.boundaries = {\n      minX: areaRect.left - movableRect.left + movable.position.x,\n      maxX: areaRect.right - movableRect.right + movable.position.x,\n      minY: areaRect.top - movableRect.top + movable.position.y,\n      maxY: areaRect.bottom - movableRect.bottom + movable.position.y\n    };\n  }\n\n  private maintainBoundaries(movable: MovableDirective): void {\n    movable.position.x = Math.max(this.boundaries.minX, movable.position.x);\n    movable.position.x = Math.min(this.boundaries.maxX, movable.position.x);\n    movable.position.y = Math.max(this.boundaries.minY, movable.position.y);\n    movable.position.y = Math.min(this.boundaries.maxY, movable.position.y);\n  }\n}\n",
    "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {XXL_FLOW_TYPES} from './flow-based';\nimport {FlowBasedComponent} from './flow-based.component';\nimport {FlowBasedService} from './flow-based.service';\nimport {SourceComponent} from './components/source/source.component';\nimport {DummyComponent} from './components/dummy/dummy.component';\nimport {BlockComponent} from './block/block.component';\nimport {DraggableDirective} from './drag-drop/draggable/draggable.directive';\nimport {MovableDirective} from './drag-drop/movable/movable.directive';\nimport {MovableAreaDirective} from './drag-drop/movable-area/movable-area.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    FlowBasedComponent,\n    SourceComponent,\n    DummyComponent,\n    BlockComponent,\n    DraggableDirective,\n    MovableDirective,\n    MovableAreaDirective],\n  exports: [FlowBasedComponent],\n  providers: [\n    {\n      provide: XXL_FLOW_TYPES,\n      useValue: {\n        source: DummyComponent\n      }\n    },\n    FlowBasedService],\n  entryComponents: [DummyComponent, SourceComponent],\n\n})\n\nexport class FlowBasedModule {\n}\n"
  ],
  "names": [
    "XXL_FLOW_TYPES",
    "InjectionToken",
    "FlowBasedService",
    "XXL_FLOW_ENTRY",
    "FlowBasedComponent",
    "element",
    "service",
    "injector",
    "flowTypes",
    "this",
    "prototype",
    "ngOnInit",
    "ngOnChanges",
    "createInjector",
    "entry",
    "state",
    "Injector",
    "create",
    "providers",
    "provide",
    "useValue",
    "parent",
    "registerOnChange",
    "onChange",
    "registerOnTouched",
    "writeValue",
    "decorators",
    "type",
    "Component",
    "args",
    "ElementRef",
    "undefined",
    "Inject",
    "SourceComponent",
    "styles",
    "DummyComponent",
    "BlockComponent",
    "ctorParameters",
    "DraggableDirective",
    "dragStart",
    "EventEmitter",
    "dragMove",
    "dragEnd",
    "draggable",
    "isDragging",
    "onPointerDown",
    "event",
    "stopPropagation",
    "dragState",
    "onPointerUp",
    "emit",
    "onPointerMove",
    "Directive",
    "propDecorators",
    "Output",
    "HostBinding",
    "HostListener",
    "MovableDirective",
    "sanitzier",
    "_this",
    "_super",
    "call",
    "Object",
    "defineProperty",
    "enumerable",
    "configurable",
    "y",
    "clientY",
    "position",
    "startPosition",
    "selector",
    "MovableAreaDirective",
    "subscriptions",
    "ngAfterContentInit",
    "movables",
    "changes",
    "subscribe",
    "forEach",
    "sub",
    "unsubscribe",
    "movable",
    "push",
    "measureBoundaries",
    "maintainBoundaries",
    "notifyOnChanges",
    "areaRect",
    "nativeElement",
    "getBoundingClientRect",
    "movableRect",
    "boundaries",
    "minX",
    "left",
    "x",
    "maxX",
    "right",
    "minY",
    "top",
    "maxY",
    "bottom",
    "Math",
    "max",
    "min",
    "ɵ0",
    "source",
    "FlowBasedModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
