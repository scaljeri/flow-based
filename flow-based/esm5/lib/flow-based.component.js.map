{
  "version": 3,
  "file": "flow-based.component.js",
  "sources": [
    "ng://flow-based/projects/flow-based/src/lib/flow-based.component.ts"
  ],
  "sourcesContent": [
    "import {\n  Component,\n  ElementRef,\n  forwardRef, HostListener,\n  Inject,\n  InjectionToken,\n  Injector,\n  Input,\n  OnChanges,\n  OnInit, ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { XXL_FLOW_TYPES, XxlFlowEntry, XxlFlowTypes } from './flow-based';\nimport { FlowBasedService } from './flow-based.service';\n\nexport const XXL_FLOW_ENTRY = new InjectionToken<any>('xxl-flow-entry');\n\n@Component({\n  selector: 'xxl-flow-based',\n  template: `<article #area *ngIf=\"state\" class=\"is-max\" xxlMovableArea>\n  <h1>Flow</h1>\n  <xxl-block xxlMovable *ngFor=\"let entry of state.entries\"\n             [style.left.px]=\"entry.x - 46\" [style.top.px]=\"entry.y - 40\" class=\"block\">\n    <ng-container *ngIf=\"flowTypes[entry.type]\"\n                  [ngComponentOutlet]=\"flowTypes[entry.type]\"\n                  [ngComponentOutletInjector]=\"createInjector(entry)\"></ng-container>\n  </xxl-block>\n</article>\n`,\n  styles: [`:host{display:block;margin:20px;border:4px solid #bada55;height:calc(100% - 48px);overflow:hidden}article{height:100%}`],\n  providers: [{provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FlowBasedComponent), multi: true}]\n})\nexport class FlowBasedComponent implements OnInit, OnChanges, ControlValueAccessor {\n  flowTypes: XxlFlowTypes;\n  injectors: Injector[];\n  onChange: (state: any) => void;\n  state: any;\n\n  @ViewChild('area') area: ElementRef;\n\n  constructor(private element: ElementRef,\n              private service: FlowBasedService,\n              private injector: Injector,\n              @Inject(XXL_FLOW_TYPES) flowTypes: XxlFlowTypes) {\n    this.flowTypes = flowTypes;\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(): void {\n\n  }\n\n  createInjector(entry: any) {\n    if (this.state) {\n      return Injector.create({\n        providers: [{provide: XXL_FLOW_ENTRY, useValue: entry}],\n        parent: this.injector\n      });\n    }\n  }\n\n  registerOnChange(onChange: (state: any) => void): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(): void {\n  }\n\n  writeValue(state: any): void {\n    this.state = state;\n  }\n}\n"
  ],
  "names": [],
  "mappings": ";;;;AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,UAAU,EACV,MAAM,EACN,cAAc,EACd,QAAQ,EAGA,SAAS,EAClB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AACzE,OAAO,EAAE,cAAc,EAA8B,MAAM,cAAc,CAAC;AAC1E,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD,MAAM,CAAC,uBAAM,cAAc,GAAG,IAAI,cAAc,CAAM,gBAAgB,CAAC,CAAC;AAiBxE,MAAM;;;;;;;IAQJ,YAAoB,OAAmB,EACnB,SACA,UACgB;QAHhB,YAAO,GAAP,OAAO,CAAY;QACnB,YAAO,GAAP,OAAO;QACP,aAAQ,GAAR,QAAQ;QAE1B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;;;;IAED,QAAQ;KACP;;;;IAED,WAAW;KAEV;;;;;IAED,cAAc,CAAC,KAAU;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACrB,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;gBACvD,MAAM,EAAE,IAAI,CAAC,QAAQ;aACtB,CAAC,CAAC;SACJ;KACF;;;;;IAED,gBAAgB,CAAC,QAA8B;QAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC1B;;;;IAED,iBAAiB;KAChB;;;;;IAED,UAAU,CAAC,KAAU;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;YAvDF,SAAS,SAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,QAAQ,EAAE;;;;;;;;;CASX;gBACC,MAAM,EAAE,CAAC,wHAAwH,CAAC;gBAClI,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC;aAC1G;;;;YA7BC,UAAU;YAWH,gBAAgB;YAPvB,QAAQ;4CAqCK,MAAM,SAAC,cAAc;;;qBALjC,SAAS,SAAC,MAAM"
}
